# This is a basic workflow to help you get started with Actions

name: IP Workflow

# Controls when the workflow will run
on:
  schedule:
    - cron: "25 8 * * *"
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CF_KV_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/storage/kv/namespaces/${{secrets.CF_NAMESPACE_ID}}/values
  PROXYS: proxys
  PROXYS_BAK: proxys_bak
  PROXYS_UPDATED: proxys_updated

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.
      - name: test data
        run: |
          cat > valid_ips.txt <<EOF
          8.219.123.11
          8.219.5.10
          8.219.87.30
          8.219.86.200
          8.219.11.158
          8.222.187.4
          8.222.184.198
          8.219.235.164
          8.219.170.232
          8.219.198.139
          8.219.84.214
          8.219.99.169
          8.219.107.135
          47.245.126.151
          8.219.193.202
          8.219.177.205
          8.219.161.129
          8.219.174.142
          8.219.124.227
          8.219.4.122
          8.219.50.180
          8.219.83.71
          8.219.42.72
          8.222.156.242
          8.222.174.108
          8.222.160.176
          8.222.136.247
          8.219.220.88
          8.219.139.13
          8.219.191.40
          8.219.113.232
          8.219.189.143
          8.222.191.138
          47.245.102.52
          8.219.100.168
          8.219.93.5
          8.219.83.201
          8.219.98.13
          8.219.78.188
          8.219.51.211
          8.222.167.147
          8.222.183.242
          8.219.210.57
          8.219.201.245
          8.219.208.104
          8.219.110.81
          8.219.122.55
          8.219.126.240
          8.219.142.191
          8.219.111.147
          8.222.214.231
          8.222.215.228
          8.219.97.50
          8.222.165.117
          8.222.144.50
          8.219.229.190
          47.245.118.70
          8.219.120.87
          8.219.1.92
          8.219.67.133
          8.219.103.65
          8.219.240.160
          47.245.114.163
          8.219.209.14
          8.219.110.248
          8.219.199.220
          8.219.202.130
          8.219.111.175
          8.222.208.38
          8.219.77.222
          8.219.237.250
          EOF
  
      - name: Backup original data, append into valid_ips.txt
        run: |
          ret=`curl -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" "${{CF_KV_API}}/${{PROXYS}}"`
          if [[ "$orig_data" == *error* ]]; then
            echo $ret
          else
            curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" \
              -d "$ret" "${{env.CF_KV_API}}/${{PROXYS_BAK}}"
            echo $ret |tr -d '["]'|sed -r 's/,| /\n/g' >> valid_ips.txt
            cat valid_ips.txt | sort | uniq > valid_ips.txt
            wc -l valid_ips.txt

      - name: SSL/TLS Handshake Test
        run: |          
          touch valid_ips_with_ssl.txt
          while IFS= read -r ip || [ $ip ]; do
            ret=`echo|openssl s_client -connect $ip:443 --noservername -brief 2>&1|tr -s '\n\r' ' '`
            case "$ret" in
                *Verification:\ OK*) echo "$ip" >> valid_ips_with_ssl.txt ;;
                *458*)               echo "$ip" >> valid_ips_with_ssl.txt ;; # unrecognized name
                *410*)               echo 410 ;; # alert handshake failure
                *connect\ error*)    echo connect error ;;
                #*verify\ error*)    echo error ;; # self signed certificate
                #*write:errno=*)     echo retry ;;
                *)                   echo "$ip $ret" ;;
            esac
          done < valid_ips.txt
          wc -l valid_ips_with_ssl.txt

      - name: Upload IPs file
        uses: actions/upload-artifact@v4
        with:
          name: cf-proxys
          path: valid_ips_with_ssl.txt
          
      - name: Update valid IPs to server
        run: |
          data=`echo $(cat valid_ips_with_ssl.txt)`
          curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" \
            -d "$data" "${{CF_KV_API}}/${{PROXYS}}"
          curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" \
            -d "`date +%s%3N`" "${{CF_KV_API}}/${{PROXYS_UPDATED}}"
