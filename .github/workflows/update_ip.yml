# This is a basic workflow to help you get started with Actions

name: IP Workflow

# Controls when the workflow will run
on:
  schedule:
    - cron: "30 3 * * *"
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CF_KV_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/storage/kv/namespaces/${{secrets.CF_NAMESPACE_ID}}/values
  PING_API: https://api.globalping.io/v1/measurements
  PROXYS: proxys
  PROXYS_BAK: proxys_bak
  PROXYS_UPDATED: proxys_updated
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.
      - name: download ip zip file, unzip, merge, uniq
        run: |
          curl -o ip.zip https://zip.baipiao.eu.org
          unzip ip.zip -d ip
          cat ip/*.txt | sort | uniq > ip.txt
          echo zip `wc -l ip.txt` >> $GITHUB_STEP_SUMMARY
          
      - name: backup original data, merge
        run: |
          for key in $PROXYS_BAK $PROXYS; do
            ret=`curl -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" "$CF_KV_API/$key"`
            if [[ "$ret" == *error* ]]; then
              echo $ret
            elif [ ! -z "$ret" ] && [ ! "$ret" = "[]" ]; then
              echo "$ret" |tr -d '["]'|sed -r 's/, ?/\n/g' >> ip.txt
              if [ $key == $PROXYS ]; then
                curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" -d "$ret" "$CF_KV_API/$PROXYS_BAK"
              fi
            fi
          done
          cat ip.txt | sort | uniq > tmp.txt
          mv tmp.txt ip.txt
          echo merge `wc -l ip.txt` >> $GITHUB_STEP_SUMMARY
  
      - name: http test, filter
        run: |
          UA="Mozilla/5.0 Chrome/107.0.0.0 Safari/537.36"
          # ip port
          measure(){
            local ip=$1 port=$2 protocol=http
            [ -z "$port" ] && port=443
            [ $port -eq 443 ] && protocol=https
            local measure_url=`curl -H "content-type: application/json" -A "$UA" \
              -d '{"type":"http","target":"'$ip'","locations":[{"country":"HK","limit":2}],"measurementOptions":{"port":"'$port'","protocol":"'$protocol'"}}' \
              -si "$PING_API"|grep location|awk '{print $2}'|tr -d '\n\r'`
            sleep 1
            while true; do
              r=`curl -A "$UA" -s "$measure_url"`
              case "$r" in
                *in-progress*)   sleep 1; continue;;
                #*loss\":0*)      echo "$ip" >> valid_ip.txt; break;;
                *authorized\":*) echo $ip:$port $measure_url; echo "$ip" >> ip$port.txt; break;;
                *cloudflare*)    echo $ip:$port $measure_url; echo "$ip" >> ip$port.txt; break;;
                *)               break;;
              esac
            done
          }
          while IFS= read -r ip; do
            measure $ip 443
          done < ip.txt
          while IFS= read -r ip; do
            measure $ip 80
          done < ip443.txt
          echo `wc -l ip80.txt` >> $GITHUB_STEP_SUMMARY
          echo `wc -l ip443.txt` >> $GITHUB_STEP_SUMMARY
          
      - name: update valid ip to server
        run: |
          [ -s ip443.txt ] && data=[[$(echo `sed -r 's/^(.*)$/"\1"/' ip443.txt`|tr -s ' ' ',')] || echo 'no valid ip with port 443' && exit 1;
          [ -s ip80.txt ] && data=$data,[$(echo `sed -r 's/^(.*)$/"\1"/' ip80.txt`|tr -s ' ' ',')]
          data=$data]
          curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" \
            -d "$data" "$CF_KV_API/$PROXYS" >> $GITHUB_STEP_SUMMARY
          curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" \
            -d "`date +%s%3N`" "$CF_KV_API/$PROXYS_UPDATED"
      
      - name: upload ip file
        uses: actions/upload-artifact@v4
        with:
          name: cfproxys
          path: |
            ip443.txt
            ip80.txt