# This is a basic workflow to help you get started with Actions

name: IP Workflow

# Controls when the workflow will run
on:
  schedule:
    - cron: "0 13 * * *"
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CF_KV_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/storage/kv/namespaces/${{secrets.CF_NAMESPACE_ID}}/values
  PROXYS: proxys
  PROXYS_BAK: proxys_bak
  PROXYS_UPDATED: proxys_updated

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.
      - name: Download IPs zip file, unzip, merge, uniq
        run: |
          curl -o ips.zip https://zip.baipiao.eu.org
          unzip ips.zip -d ips
          cat ips/*.txt | sort | uniq > ips.txt
          wc -l ips.txt
  
      - name: Ping IPs and filter
        run: |
          UA="Mozilla/5.0 Chrome/107.0.0.0 Safari/537.36"
          touch valid_ips.txt
          while IFS= read -r ip; do
            measure_url=`curl -H "content-type: application/json" -A "$UA" \
              -d '{"type":"ping","target":"'$ip'","locations":[{"country":"HK","limit":2}]}' \
              -i "https://api.globalping.io/v1/measurements"|grep location|awk '{print $2}'|tr -d '\n\r'`
            sleep 1
            while true; do
              echo url=$measure_url
              r=`curl -A "$UA" -s "$measure_url"`
              case "$r" in
                *in-progress*)  sleep 1; continue;;
                *loss\":0*)     echo "$ip" >> valid_ips.txt; break;;
                *)              break;;
              esac
            done
          done < ips.txt
          wc -l valid_ips.txt
  
      - name: Backup original data, append into valid_ips.txt
        run: |
          for key in $PROXYS_BAK $PROXYS; do
            ret=`curl -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" "$CF_KV_API/$key"`
            if [[ "$ret" == *error* ]]; then
              echo $ret
            elif [ ! -z "$ret" ]; then
              echo "$ret" |tr -d '["]'|sed -r 's/,| /\n/g' >> valid_ips.txt
              [ $key == $PROXYS ] && curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" -d "$ret" "$CF_KV_API/$PROXYS_BAK"
            fi
          done
          cat valid_ips.txt | sort | uniq > tmp.txt
          mv tmp.txt valid_ips.txt
          wc -l valid_ips.txt

      - name: SSL/TLS Handshake Test
        run: |          
          touch ips_with_ssl.txt
          while IFS= read -r ip || [ $ip ]; do
            retry=false
            while true; do
              ret=`echo|openssl s_client -connect $ip:443 -brief 2>&1|tr -s '\n\r' ' '`
              case "$ret" in
                *410*|*write:errno=*)  # 410: alert handshake failure
                  echo $ret ; 
                  ! $retry && retry=true && echo "retry $ip" && continue ;;
                *Verification:\ OK*) echo "$ip" >> ips_with_ssl.txt ;;
                *458*)               echo "$ip" >> ips_with_ssl.txt ;; # unrecognized name                
                #(438)alert internal error, self signed certificate, expired, unable to get local issuer certificate
                #*verify\ error*)    echo verify error ;; 
                #*connect\ error*)   echo connect error ;;
                *)                   echo "$ip $ret" ;;
              esac
              break;
            done
          done < valid_ips.txt
          wc -l ips_with_ssl.txt

      - name: Upload IPs file
        uses: actions/upload-artifact@v4
        with:
          name: cf-proxys
          path: ips_with_ssl.txt
          
      - name: Update valid IPs to server
        run: |
          [ ! -s ips_with_ssl.txt ] && exit;
          data=[$(echo `sed -r 's/^(.*)$/"\1"/' ips_with_ssl.txt`|tr -s ' ' ',')]
          curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" \
            -d "$data" "$CF_KV_API/$PROXYS"
          curl -X PUT -H "Authorization:Bearer ${{secrets.CF_API_TOKEN}}" \
            -d "`date +%s%3N`" "$CF_KV_API/$PROXYS_UPDATED"
