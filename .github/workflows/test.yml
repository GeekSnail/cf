# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      json:
        description: 'json content'
        required: false
        default: '[{"1.1":"2.2"},"3.3",4]'
        type: 'string'
      ip:
        description: 'proxy ip'
        required: false
        default: '47.242.107.109'
        type: 'string'
        

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a set of commands using the runners shell
      - name: inputs json test
        run: |
          if [ ! -z '${{ inputs.json }}' ]; then
            # https://stackoverflow.com/questions/46954692/check-if-string-is-a-valid-json-with-jq
            echo '${{ inputs.json }}' | jq -e . >/dev/null
            jq -e . >/dev/null <<< '${{ inputs.json }}'
            echo '${{ inputs.json }}' > test.json
            cat test.json
            jq --help
          fi
      - name: curl proxy test
        run: |
          #set +e
          host1='speed.cloudflare.com'; path1='/cdn-cgi/trace'
          host2='android.chat.openai.com'; path2='/public-api/mobile/server_status/v1'
          curl http://ip.sb
          if [ ! -z '${{ inputs.ip }}' ]; then
            for ip in ${{ inputs.ip }}; do
              echo ip=$ip
              if curl -I --connect-timeout 5 --resolve $host1:443:$ip https://$host1$path1 2>&1; then
                r=`curl --connect-timeout 5 -i --resolve $host2:443:$ip https://$host2$path2 2>&1`
                echo $r;
              fi
            done
            echo 'finished'
          fi
          
